module.exports.config = {
    name: "totinh",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Sakura",
    description: "T·ªè t√¨nh v·ªõi ng∆∞·ªùi b·∫°n ch·ªçn",
    commandCategory: "T√¨nh Y√™u",
    usages: "[nam/n·ªØ] [t√™n t√¨m ki·∫øm]",
    cooldowns: 5
};

function getMsg() {
    //B·∫°n c√≥ th·ªÉ custom tin nh·∫Øn ch√∫c m·ª´ng c·∫∑p ƒë√¥i m·ªõi t·∫°i ƒë√¢y
    return `M·ªçi ng∆∞·ªùi c√πng t·ªõi ch√∫c m·ª´ng h·∫°nh ph√∫c cho c·∫∑p ƒë√¥i m·ªõi n√†y n√†o ü•∞`
}

module.exports.handleReaction = async function({ api, event, handleReaction, Users, Threads }) {
    var { threadID, messageID, userID } = event;
    var { change, talkID } = handleReaction;
    const moment = require("moment-timezone");
    const { writeFileSync } = require('fs-extra');
    var dataDating = require('./noprefix/dating.json');
    const { join } = require('path');
    const path = join(__dirname, 'noprefix', 'dating.json');
  const { PREFIX } = global.config;
    if (userID == change.ID) {
    var userInfo = await Users.getData(talkID);
    var matesInfo = await Users.getData(change.ID);
    api.unsendMessage(handleReaction.messageID);
    var userTwo = {
        name_one: userInfo.name,
        ID_one: talkID,
        name_two: matesInfo.name,
        ID_two: change.ID,
        status: true,
        data: {
            days: moment.tz("Asia/Ho_Chi_minh").format("hh:mm:ss DD/MM/YYYY"),
            countDays: 0,
            point: 0,
            daily: null,
            timestamp: Date.now()
        }
    }
        dataDating.push(userTwo)
        writeFileSync(path, JSON.stringify(dataDating, null, 4));
        return api.sendMessage(`B·∫°n ƒë√£ th·∫£ c·∫£m x√∫c, ƒë·ªìng nghƒ©a v·ªõi vi·ªác b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi l·ªùi t·ªè t√¨nh n√†y c·ªßa ng∆∞·ªùi kia.\n\n${getMsg()}\nNotes:\n- C·∫£ 2 b·∫°n s·∫Ω kh√¥ng th·ªÉ chia tay trong v√≤ng 7 ng√†y k·ªÉ t·ª´ khi b·∫Øt ƒë·∫ßu.\n- Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ xem th√¥ng tin v·ªÅ c·∫∑p ƒë√¥i c·ªßa m√¨nh b·∫±ng c√°ch ${PREFIX}dating info`, threadID, async (error, info) => {
            api.changeNickname(`${matesInfo.name} - Dating with ${userInfo.name}`, threadID, change.ID);
      var { userInfo } = await Threads.getInfo(threadID);
      if (Object.keys(userInfo).includes(talkID)) {
        api.changeNickname(`${userInfo.name} - Dating with ${change.name}`, threadID, talkID.ID);
      }
            api.sendMessage(`${change.name} ƒë√£ ƒë·ªìng √Ω v·ªõi l·ªùi t·ªè t√¨nh c·ªßa b·∫°n, c·∫£ 2 ng∆∞·ªùi ƒë√£ b·∫Øt ƒë·∫ßu ·ªü tr·∫°ng th√°i h·∫πn h√≤. B·∫°n c√≥ th·ªÉ xem th√¥ng tin v·ªÅ c·∫∑p ƒë√¥i c·ªßa m√¨nh b·∫±ng l·ªánh dating.`, talkID);
        })
    }
}

module.exports.handleReply = async function({ api, event, handleReply, Threads }) {
    var { threadID, messageID, senderID, body } = event;
    var { type, match } = handleReply;
    switch (type) {
        case "change":
            if (isNaN(body)) return api.sendMessage(`L·ª±a ch·ªçn c·ªßa b·∫°n ph·∫£i l√† m·ªôt s·ªë v√† l√† s·ªë nguy√™n d∆∞∆°ng.`, threadID, messageID);
            if (body > match.length) return api.sendMessage(`L·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng n·∫±m trong danh s√°ch.`, threadID, messageID);
            var change = match[body - 1];
      console.log(change)
            return api.sendMessage(`Vui l√≤ng reply tin nh·∫Øn n√†y k√®m l·ªùi nh·∫Øn m√† b·∫°n mu·ªën g·ª≠i ƒë·∫øn cho ng∆∞·ªùi ·∫•y.`, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    change: change,
                    type: "message"
                })
            })
        case "message" :
            if (!body) return api.sendMessage(`B·∫°n c·∫ßn nh·∫≠p l·ªùi nh·∫Øn.`, threadID, messageID);
            var { change } = handleReply;
      var allThreads = await Threads.getAll();
      var allThreadsInfo = [], finish = 0
      for (var i of allThreads) {
        var { userInfo: allUsers } = await Threads.getInfo(i.threadID);
        for (var user of allUsers) {
          if (user.id == change.ID) {
            var msg = {
              body: `Hey ~ ${change.name} - B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c m·ªôt l·ªùi t·ªè t√¨nh t·ª´ m·ªôt ng∆∞·ªùi ·∫©n danh v·ªõi l·ªùi t·ªè t√¨nh:\n\n${body}.\n\nN·∫øu b·∫°n ƒë·ªìng √Ω, vui l√≤ng th·∫£ c·∫£m x√∫c <3 v√†o tin nh·∫Øn n√†y.`,
              mentions: [ { tag: change.name, id: change.ID } ]
            };
            return api.sendMessage(msg, i.threadID, (error, info) => {
              finish++;
              global.client.handleReaction.push({
                name: this.config.name,
                                messageID: info.messageID,
                                change: change,
                                talkID: senderID,
                                type: 'accept'
              })
              api.sendMessage(`ƒê√£ g·ª≠i l·ªùi t·ªè t√¨nh th√†nh c√¥ng cho ${change.name}. B·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi ${change.name} ƒë·ªìng √Ω`, threadID);
            })
            if (finish == 0) return api.sendMessage(`ƒê√£ x·∫£y ra l·ªói khi g·ª≠i l·ªùi t·ªè t√¨nh cho ${change.name}, vui l√≤ng th·ª≠ l·∫°i sau.`, threadID);
          }
        }
      }
        default:
            break;
    }
}


module.exports.run = async function({ api, args, event, Users }) {
    var { threadID, messageID, senderID, isGroup } = event;
    var { allowInbox } = global.config;
    var dataDating = require('./noprefix/dating.json');
    var author = dataDating.find(i => i.ID_one == senderID || i.ID_two == senderID);

    if (isGroup == true) return api.sendMessage(`L·ªánh n√†y kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong box, vui l√≤ng nh·∫Øn tin ri√™ng v·ªõi Bot.`, threadID);
    if (allowInbox == false) return api.sendMessage(`ƒê·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y, vui l√≤ng b·∫≠t ch·∫ø ƒë·ªô allowInbox trong config`, threadID);
    if (!/N·ªØ|Nam|n·ªØ|nam/g.test(args[0])) return api.sendMessage(`B·∫°n c·∫ßn nh·∫≠p gi·ªõi t√≠nh c·ªßa ƒë·ªëi t∆∞·ª£ng m√† b·∫°n mu·ªën t√¨m.\n\nV√≠ D·ª•: <prefix>totinh nam/n·ªØ p`, threadID, messageID);
    if (!/[a-z]|[A-Z]/g.test(args[1])) return api.sendMessage(`ƒê·ªÉ gi√∫p vi·ªác t√¨m ki·∫øm nhanh h∆°n, b·∫°n c·∫ßn nh·∫≠p ch·ªØ c√°i ƒë·∫ßu ho·∫∑c t√™n c·ªßa ng∆∞·ªùi c·∫ßn t√¨m.`, threadID, messageID);
    var userInfo = await Users.getData(senderID);
    if (author && author.status == true) return api.sendMessage(`T√≠nh c·∫Øm s·ª´ng ng∆∞·ªùi ta hay sao m√† ƒë·ªãnh t·ªè t√¨nh ai n·ªØa?`, threadID, messageID);
    switch (args[0]) {
        case "Nam":
        case "nam":
            var gender = 2;
            break;
        case "N·ªØ":
        case "n·ªØ":
        case "nu":
        case "Nu":
            var gender = 1;
            break
        default:
            break;
    }
    var match = [], msg = 'ƒê√¢y l√† nh·ªØng ng∆∞·ªùi m√† b·∫°n c√≥ th·ªÉ t·ªè t√¨nh:\n\n', number = 1;
    var allUsersInfo = await Users.getAll();
    for (var i of allUsersInfo) {
        if (i.name.toLowerCase().includes(args[1].toLowerCase())) {
             var a = dataDating.some(i => i.ID_one == i.userID || i.ID_two == i.userID);
             if (a != true) {
                let uif = await Users.getInfo(i.userID);
                if (uif.gender == gender) match.push({ ID: i.userID, name: i.name });
            }
        }
    }
    if (match.length == 0) return api.sendMessage(`R·∫•t ti·∫øc, kh√¥ng c√≥ ƒë·ªëi t∆∞·ª£ng n√†o m√† b·∫°n c√≥ th·ªÉ t·ªè t√¨nh.`);
    for (var i of match) msg += `${number++}. ${i.name}\n`;
    msg += `\nReply tin nh·∫Øn n√†y s·ªë t∆∞∆°ng ·ª©ng v·ªõi ng∆∞·ªùi m√† b·∫°n mu·ªën t·ªè t√¨nh.`;
    return api.sendMessage(msg, threadID, (error, info) => {
        console.log(info)
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            type: 'change',
            match: match
        })
    });
}