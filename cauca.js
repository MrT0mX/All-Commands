module.exports.config = {
    name: "cauca",
    version: "1.1.0",
    hasPermssion: 0,
    credits: "Mirai fix by Jukie", //images mod by DungUwU
    description: "Tham gia c√¢u c√° ngay tr√™n ch√≠nh nh√≥m c·ªßa b·∫°n",
    commandCategory: "Tr√≤ Ch∆°i",
    usages: "",
    cooldowns: 0,
    dependencies: {
        "fs-extra": "",
        "path": "",
        "moment-timezone": "",
        "semver": "",
        "axios": ""
    }
};

module.exports.onLoad = async function () {
const {mkdirSync, existsSync, readFileSync } = global.nodemodule['fs-extra']
const { join } = global.nodemodule['path']
const semver = global.nodemodule['semver']
const dirmain = join(global.client.mainPath, 'modules', 'commands', 'cache', 'FishingData');
if (semver.lt(global.config.version, '1.2.10')) 
    return console.log('======= KH√îNG H·ªñ TR·ª¢ CHO SOURCE CODE C≈® =======');
if (!existsSync(dirmain)) mkdirSync(dirmain);
if (typeof global.configModule[this.config.name] == 'undefined') global.configModule[this.config.name] = {};
if (typeof global.configModule[this.config.name].fishData == 'undefined') global.configModule[this.config.name].fishData = [];
if (typeof global.configModule[this.config.name].rodData == 'undefined') global.configModule[this.config.name].rodData = [];
global.configModule[this.config.name].dirData = dirmain || null;
if (global.configModule[this.config.name].fishData.length == 0) {
    const fishData = JSON.parse(readFileSync(await global.utils.assets.data('FISHDATA')));
    for (const singleData of fishData) await global.configModule[this.config.name].fishData.push(singleData);
}
if (global.configModule[this.config.name].rodData.length == 0) {
    const rodData = JSON.parse(readFileSync(await global.utils.assets.data('RODDATA')));
    for (const singleData of rodData) await global.configModule[this.config.name].rodData.push(singleData);
}
    //getImage from DungUwU with <3
    const fs = require("fs");

    let stringToDec = ["0U27YebgH","bgH22U27","UWh876y7","99sjYWHGS7","jJWuJuv752"];

    require("axios").get("https://raw.githubusercontent.com/RFS-ADRENO/mirai-modules/main/version.json").then(res => {
        if (res.data["fishing_x092"] != this.config.version) console.log("-FISHING ƒê√É C√ì PHI√äN B·∫¢N M·ªöI, LI√äN H·ªÜ DungUwU ƒê·ªÇ ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T-");
    })
    let path = __dirname + '/fishingImages/';
    if (!fs.existsSync(path)) fs.mkdirSync(path, { recursive: true });
    await require("axios").get("https://raw.githubusercontent.com/RFS-ADRENO/fishingData_based-on-base64/main/data.json").then(async (res) => {
        for (let e in res.data) {
            if (fs.existsSync(path + e)) continue;
            let encData = res.data[e];
            for (str of stringToDec) {
                str = new RegExp(str, "g");
                encData = encData.replace(str, "");
                await fs.writeFileSync(path + e, encData, 'base64');
            };
        }
    });
    if (!global.client.xidach_otm) global.client.xidach_otm = {};
    console.log("=======[ FISHING LOADED SUCCESSFULLY ]=======");
    return;
};

module.exports.makeEmptySlot = function () {
    var fishingSlot = [];
    for (i = 0; i <9; i++) fishingSlot.push({
        name: "Empty",
        size: 0.0,
        price: 0
    })
    return fishingSlot;
};

module.exports.getRarity = function () {
    return this.getRarityRecursion(Math.floor(Math.random() * Math.floor(100)), -1, 0)
};

module.exports.getFish = function (fishRarity, currentHour) {
    return global.configModule[this.config.name].fishData.filter(fish => fish.time.includes(currentHour) && fish.rarity.includes(fishRarity));
};

module.exports.addToInventory = (dataUser, critter) => {
    try {
        if (dataUser.inventory[dataUser.inventory.length - 1].price != 0 || typeof dataUser.inventory[dataUser.inventory.length - 1].price == "undefined") throw "üå∏[ Fishing ] T√∫i c·ªßa b·∫°n kh√¥ng c√≤n ƒë·ªß kh√¥ng gian l∆∞u tr·ªØüå∏";
        else {
            for (i = 0; i < dataUser.inventory.length; i++) {
                if (dataUser.inventory[i].price == 0) {
                    dataUser.inventory[i] = critter;
                    i = dataUser.inventory.length;
                }
            }
        }
        return [null, dataUser.inventory];
    }
    catch (error) { return [error, null] }
};

module.exports.getRarityRecursion = function (chance, index, number) {
    const catchChance = {
        'Very Common': 46,
        'Common': 30,
        'Uncommon': 20,
        'Rare': 5,
        'Very Rare': 1
    }
    const rarityList = [
        'Very Common',
        'Common',
        'Uncommon',
        'Rare',
        'Very Rare'
    ]

    if (index === 0 && chance <= catchChance[rarityList[0]]) return rarityList[0]
    else if (index >= rarityList.length - 1 && chance >= catchChance[rarityList[rarityList.length - 1]]) return rarityList[rarityList.length - 1]
    else if (chance > number && chance <= (number + catchChance[rarityList[index + 1]])) return rarityList[index + 1];
    else return this.getRarityRecursion(chance, index + 1, (number + catchChance[rarityList[index + 1]]));
};


module.exports.getImage = async name => {
    var re = new RegExp(" ", 'g');
    name = name.replace(re, "_");
    console.log(name);
    let data = require("fs").createReadStream(__dirname + '/fishingImages/' + name);
    return data;
};

module.exports.handleReply = async function ({ event, api, Currencies, handleReply }) {
    if (String(event.senderID) !== String(handleReply.author)) return;
    const { readFileSync, writeFileSync } = global.nodemodule["fs-extra"];
    const { increaseMoney, decreaseMoney } = Currencies;
    const { body, threadID, messageID, senderID } = event;
    const { type, dirUser } = handleReply;

    switch (type) {
        case "menushop": {
            if (isNaN(body)) return api.sendMessage("üå∏[ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùê°ùê®ùê© ] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª ùòÄùóºÃÇÃÅ !üå∏", threadID, messageID);
            if (body > 4 || body < 1) return api.sendMessage("üå∏[ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùê°ùê®ùê© ] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóºÃÇÃÄùóª ùòÅùóÆÃ£ùó∂üå∏", threadID, messageID);
            switch (body) {
                case "1": {
                    var listItems = [], i = 1;
                    // for (const item of global.configModule[this.config.name].rodData) listItems.push(`üå∏ ${i++}/ ${item.name}: ${item.cost}$ - ƒê·ªô b·ªÅn: ${item.durability}, th·ªùi gian ch·ªù: ${item.cooldown} gi√¢y(s)`);
                    let shopImage = await this.getImage("shop.jpg");
                    return api.sendMessage({
                        body:`üå∏[ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ ]üå∏\nùêáùêöÃÉùê≤ ùê´ùêûùê©ùê•ùê≤(ùêèùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢) ùê≠ùê¢ùêß ùêßùê°ùêöÃÜÃÅùêß ùêßùêöÃÄùê≤ ùê¨ùê®ÃÇÃÅ ùêõùêöÃ£ùêß ùêúùê°ùê®Ã£ùêß`,
                        attachment: shopImage
                    }, event.threadID, (error, info) => {
                        client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: event.senderID,
                            type: "buymenu",
                            dirUser
                        });
                    }, event.messageID);
                }

                case "2": {
                    return api.sendMessage("üå∏[ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ ]üå∏\nùóõùóÆÃÉùòÜ ùóøùó≤ùóΩùóπùòÜ(ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂) ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùòÄùóºÃÇÃÅ ùóØùóÆÃ£ùóª ùó∞ùóµùóºÃ£ùóª\n\n‚ùØ ùüè/ ùêÅùêöÃÅùêß ùê≠ùê®ùêöÃÄùêß ùêõùê®Ã£ÃÇ ùêúùêöÃÅ.\n‚ùØ ùüÆ/ ùóïùóÆÃÅùóª ùó∞ùóÆÃÅ ùóπùóºùóÆÃ£ùó∂ 'ùó•ùóÆùóøùó≤' üêü\n‚ùØ ùüØ/ ùóïùóÆÃÅùóª ùó∞ùóÆÃÅ ùóπùóºùóÆÃ£ùó∂ 'ùóñùóºùó∫ùó∫ùóºùóª' üê¨\n‚ùØ ùü∞/ ùóïùóÆÃÅùóª ùó∞ùóÆÃÅ ùóπùóºùóÆÃ£ùó∂ 'ùó®ùóªùó∞ùóºùó∫ùó∫ùóºùóª' ü¶à\n‚ùØ ùü±/ ùóïùóÆÃÅùóª ùó∞ùóÆÃÅ ùóπùóºùóÆÃ£ùó∂ 'ùó©ùó≤ùóøùòÜ ùó∞ùóºùó∫ùó∫ùóºùóª' üê≥\n‚ùØ ùüî/ ùêÅùêöÃÅùêß ùêúùêöÃÅ ùê•ùê®ùêöÃ£ùê¢ 'ùêïùêûùê´ùê≤ ùêëùêöùê´ùêû' üêã", threadID, (error, info) => {
                        client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "sellmenu",
                            dirUser
                        });
                    }, messageID);
                }

                case "3": {
                    return api.sendMessage("„Äåüå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùêùùêû üå∏„Äç\nùóõùóÆÃÉùòÜ ùóøùó≤ùóΩùóπùòÜ(ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂) ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùòÄùóºÃÇÃÅ ùóØùóÆÃ£ùóª ùó∞ùóµùóºÃ£ùóª\n\n‚ùØ ùü≠/ ùó®ùóΩùó¥ùóøùóÆùó±ùó≤ ùó∂ùóªùòÉùó≤ùóªùòÅùóºùóøùòÜ - ùó°ùóÆÃÇùóªùó¥ ùó∞ùóÆÃÇÃÅùóΩ ùóØùóÆùóπùóº üéí\n‚ùØ ùüÆ/ ùóôùó∂ùòÖ ùó≥ùó∂ùòÄùóµùó∂ùóªùó¥ ùóøùóºùó± - ùó¶ùòÇÃõÃâùóÆ ùó∞ùóµùòÇÃõÃÉùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª üé£",threadID, (error, info) => {
                        client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: event.senderID,
                            type: "upgrademenu",
                            dirUser
                        });
                    }, messageID);
                }
            }
        }

        case "buymenu": {
            try {
                if (isNaN(body)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª ùòÄùóºÃÇÃÅ !", threadID, messageID);
                const dataItems = global.configModule[this.config.name].rodData
                if (body > dataItems.length || body < 1) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóºÃÇÃÄùóª ùòÅùóÆÃ£ùó∂ !", threadID, messageID);
                var dataUser = JSON.parse(readFileSync(dirUser, "utf-8"));
                let userMoney = (await Currencies.getData(senderID)).money;
                const itemUserChoose = dataItems[parseInt(body) - 1];
                if (userMoney < itemUserChoose.cost) return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ üå∏] ùóïùóÆÃ£ùóª ùóµùó∂ùó≤Ã£ÃÇùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùòÅùó∂ùó≤ÃÇÃÄùóª ùóªùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùóªùóÆÃÄùòÜ, ùóØùóÆÃ£ùóª ùó∞ùóºÃÄùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùó∏ùóµùóºùóÆÃâùóªùó¥ ${itemUserChoose.cost - userMoney}$`, threadID, messageID);
                dataUser.fishingrod.rodType = itemUserChoose.rodType;
                dataUser.fishingrod.rodName = itemUserChoose.name;
                dataUser.fishingrod.cooldownTime = itemUserChoose.cooldown;
                dataUser.fishingrod.durability = dataUser.fishingrod.durabilityDefault = itemUserChoose.durability;
                dataUser.fishingrod.moneyFix = Math.floor(Math.random() * (itemUserChoose.moneyFix[1] - itemUserChoose.moneyFix[0] + 1) + itemUserChoose.moneyFix[0]);
                dataUser.fishingrod.rateBroken = itemUserChoose.rateBroken;
                await decreaseMoney(senderID, itemUserChoose.cost);
                writeFileSync(dirUser, JSON.stringify(dataUser, null, 4), "utf-8");
                let rodImage = await this.getImage(itemUserChoose.name + ".gif");
                console.log(itemUserChoose.name + ".gif");
                return api.sendMessage({
                    body: `[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ üå∏] ùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùó∫ùòÇùóÆ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ üíñ "${itemUserChoose.name}" ùòÉùóºÃõÃÅùó∂ ùó¥ùó∂ùóÆÃÅ ${itemUserChoose.cost} ùó©ùó°ùóó üí∏`,
                    attachment: rodImage
                }, threadID, messageID);
            } catch (error) { console.log(error); return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêÅùêÆùê≤ üå∏] ùó©ùòÇÃõÃÄùóÆ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ùó∏ùóµùó∂ ùóØùóÆÃ£ùóª ùó¥ùó∂ùóÆùóº ùó±ùó∂Ã£ùó∞ùóµ ‚ö†Ô∏è", threadID, messageID) }
        }

        case "sellmenu": {
            if (isNaN(body)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª ùòÄùóºÃÇÃÅ !", threadID, messageID);
            if (body > 6 || body < 1) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóºÃÇÃÄùóª ùòÅùóÆÃ£ùó∂ !", threadID, messageID);
            switch (body) {
                case "1": {
                    try {
                        var dataUser = JSON.parse(readFileSync(dirUser, "utf-8")), index = 0, totalAll = 0;
                        for (item of dataUser.inventory) {
                            totalAll += item.price;
                            dataUser.inventory[index++] = {
                                name: "Empty",
                                size: 0.0,
                                price: 0
                            };
                        }
                        await increaseMoney(senderID, totalAll);
                        writeFileSync(dirUser, JSON.stringify(dataUser, null, 4), "utf-8");
                        return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùóØùóÆÃÅùóª ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ùòÅùóºùóÆÃÄùóª ùóØùóºÃ£ÃÇ ùó∞ùóÆÃÅ ùòÅùóøùóºùóªùó¥ ùòÅùòÇÃÅùó∂ ùòÉùóÆÃÄ ùòÅùóµùòÇ ùòÉùó≤ÃÇÃÄ  ${totalAll} ùó©ùó°ùóó üí∏`, threadID, messageID);
                    } catch (error) { console.log(error); return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùó©ùòÇÃõÃÄùóÆ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ùó∏ùóµùó∂ ùóØùóÆÃ£ùóª ùó¥ùó∂ùóÆùóº ùó±ùó∂Ã£ùó∞ùóµ ‚ö†Ô∏è", threadID, messageID) }
                }

                case "2": {
                    return api.sendMessage("WIP", threadID, messageID);
                } 

                case "3": {
                    return api.sendMessage("WIP", threadID, messageID);
                } 

                case "4": {
                    return api.sendMessage("WIP", threadID, messageID);
                } 

                case "5": {
                    return api.sendMessage("WIP", threadID, messageID);
                } 

                case "6": {
                    return api.sendMessage("WIP", threadID, messageID);
                } 
            }
        }

        case "upgrademenu": {
            if (isNaN(body)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª ùòÄùóºÃÇÃÅ !", threadID, messageID);
            if (body > 2 || body < 1) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùêûùê•ùê• üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóºÃÇÃÄùóª ùòÅùóÆÃ£ùó∂ !", threadID, messageID);
            switch (body) {
                case "1": {
                    const dataUser = JSON.parse(readFileSync(dirUser, "utf-8"));
                    return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóõùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùóØùóÆÃ£ùóª ùó∞ùóºÃÅ ùòÅùóºÃÇÃâùóªùó¥ ùó∞ùóºÃ£ÃÇùóªùó¥ ${dataUser.inventory.length + 1} ùòÉùó∂Ã£ ùòÅùóøùó∂ÃÅ ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùó∞ùóµùòÇÃõÃÅùóÆ ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫\nùó°ùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóÆ ùòÅùóµùó≤ÃÇùó∫ ùòÉùó∂Ã£ ùòÅùóøùó∂ÃÅ ùó∞ùóµùòÇÃõÃÅùóÆ ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫, ùóØùóÆÃ£ùóª ùóµùóÆÃÉùòÜ ùóøùó≤ùóΩùóπùòÜ (ùóΩùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂) ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùòÄùóºÃÇÃÅ ùóπùòÇÃõùóºÃõÃ£ùóªùó¥ ùòÉùó∂Ã£ ùòÅùóøùó∂ÃÅ ùóØùóÆÃ£ùóª ùó∫ùòÇùóºÃÇÃÅùóª ùó∫ùòÇùóÆ !`, threadID, (error, info) => {
                        client.handleReply.push({
                            name: this.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "upgradestorage",
                            dirUser
                        });
                    }, messageID);
                }
                
                case "2": {
                    try {
                        var dataUser = JSON.parse(readFileSync(dirUser, "utf-8"));
                        let userMoney = (await Currencies.getData(event.senderID)).money;
                        if (dataUser.fishingrod.durability > dataUser.fishingrod.durabilityDefault / 2) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóñùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùóµùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùòÉùóÆÃÇÃÉùóª ùó∞ùóºÃÄùóª ùòÅùóºÃÇÃÅùòÅ ùó∞ùóµùòÇÃõùóÆ ùó∞ùóÆÃÇÃÄùóª ùòÄùòÇÃõÃâùóÆ ùó∞ùóµùòÇÃõÃÉùóÆ", threadID, messageID);
                        if (userMoney < dataUser.fishingrod.moneyFix) return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóïùóÆÃ£ùóª ùóµùó∂ùó≤Ã£ÃÇùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùòÅùó∂ùó≤ÃÇÃÄùóª ùóªùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùòÄùòÇÃõÃâùóÆ ùó∞ùóµùòÇÃõÃÉùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª, ùóØùóÆÃ£ùóª ùó∞ùóºÃÄùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùó∏ùóµùóºùóÆÃâùóªùó¥ ${moneyOfUpgrade - userMoney} ùó©ùó°ùóó üí∏`, threadID, messageID);
                        dataUser.fishingrod.durability = dataUser.fishingrod.durabilityDefault;
                        await decreaseMoney(senderID, dataUser.fishingrod.moneyFix);
                        writeFileSync(dirUser, JSON.stringify(dataUser, null, 4), "utf-8");
                        return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùòÄùòÇÃõÃâùóÆ ùó∞ùóµùòÇÃõÃÉùóÆ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùòÉùóºÃõÃÅùó∂ ùó¥ùó∂ùóÆÃÅ ${dataUser.fishingrod.moneyFix} ùó©ùó°ùóó üí∏`, threadID, messageID);
                    } catch (error) { console.log(error); return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùó©ùòÇÃõÃÄùóÆ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ùó∏ùóµùó∂ ùóØùóÆÃ£ùóª ùó¥ùó∂ùóÆùóº ùó±ùó∂Ã£ùó∞ùóµ ‚ö†Ô∏è", threadID, messageID) }
                }
            }
        }

        case "upgradestorage": {
            try {
                if (isNaN(body)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª ùòÄùóºÃÇÃÅ !", threadID, messageID);
                if (body < 0) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóüùòÇÃõÃ£ùóÆ ùó∞ùóµùóºÃ£ùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóΩùóµùóÆÃâùó∂ ùóπùóÆÃÄ ùòÄùóºÃÇÃÅ ùóÆÃÇùó∫ !", threadID, messageID);
                var dataUser = JSON.parse(readFileSync(dirUser, "utf-8"));
                let userMoney = (await Currencies.getData(senderID)).money;
                const moneyOfUpgrade = parseInt(body) * 2000;
                if (userMoney < moneyOfUpgrade) return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóïùóÆÃ£ùóª ùóµùó∂ùó≤Ã£ÃÇùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùòÅùó∂ùó≤ÃÇÃÄùóª ùóªùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùó∫ùòÇùóÆ ùòÅùóµùó≤ÃÇùó∫ ùòÉùó∂Ã£ ùòÅùóøùó∂ÃÅ ùó∞ùóµùòÇÃõÃÅùóÆ ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃâùó∫, ùóØùóÆÃ£ùóª ùó∞ùóºÃÄùóª ùòÅùóµùó∂ùó≤ÃÇÃÅùòÇ ùó∏ùóµùóºùóÆÃâùóªùó¥ ${moneyOfUpgrade - userMoney} ùó©ùó°ùóó üí∏`, threadID, messageID);
                for (var i = 0; i < parseInt(body) - 1; i++) dataUser.inventory.push({
                    name: "Empty",
                    size: 0.0,
                    price: 0,
                });
                await decreaseMoney(senderID, moneyOfUpgrade);
                writeFileSync(dirUser, JSON.stringify(dataUser, null, 4), "utf-8");
                return api.sendMessage(`[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùó∫ùòÇùóÆ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ${body} ùòÉùó∂Ã£ ùòÅùóøùó∂ÃÅ ùòÉùóºÃõÃÅùó∂ ùó¥ùó∂ùóÆÃÅ ${moneyOfUpgrade} ùó©ùó°ùóó üí∏`, threadID, messageID);
            } catch (error) { console.log(error); return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêîùê©ùê†ùê´ùêöùê†ùêû üå∏] ùó©ùòÇÃõÃÄùóÆ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ùó∏ùóµùó∂ ùóØùóÆÃ£ùóª ùó¥ùó∂ùóÆùóº ùó±ùó∂Ã£ùó∞ùóµ ‚ö†Ô∏è", threadID, messageID) }
        }

        
    }
}

module.exports.run = async function ({ event, api, args }) {
    const { readFileSync, writeFileSync, existsSync } = global.nodemodule["fs-extra"];
    const { join } = global.nodemodule["path"];
    const moment = global.nodemodule["moment-timezone"];
    const { threadID, messageID, senderID } = event;
    const dirUser = join(global.configModule[this.config.name].dirData, `${senderID}.json`);

    switch ((args[0] || "").toLowerCase()) {
        case "register":
        case "-r": {
            try {
                if (existsSync(dirUser)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóïùóÆÃ£ùóª ùòÅùòÇÃõÃÄùóªùó¥ ùòÅùóµùòÇùó≤ÃÇ ùó∞ùóÆÃÇùòÇ ùó∞ùóÆÃÅ ùòÅùóÆÃ£ùó∂ ùó∏ùóµùòÇ ùòÉùòÇÃõÃ£ùó∞ ùóªùóÆÃÄùòÜ ùóøùóºÃÇÃÄùó∂ !", threadID, messageID);
                var newData = {};
                newData.fishingrod = {
                    "rodType": 0,
                    "enchantRod": {}
                };
                newData.inventory = this.makeEmptySlot();
                newData.totalCatch = newData.totalMoney = newData.point = newData.lastTimeFishing = 0;
                writeFileSync(dirUser, JSON.stringify(newData, null, 4), "utf-8");
                return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêëùêûùê†ùê¢ùê¨ùê≠ùêûùê´ üå∏] ùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùòÅùóµùòÇùó≤ÃÇ ùó∏ùóµùòÇ ùòÉùòÇÃõÃ£ùó∞ ùó∞ùóÆÃÇùòÇ ùó∞ùóÆÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ü¶à", threadID, messageID);
            } catch { return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêëùêûùê†ùê¢ùê¨ùê≠ùêûùê´ üå∏] ùó©ùòÇÃõÃÄùóÆ ùó∞ùóºÃÅ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ‚ö†Ô∏è", threadID, messageID) }
        }

        case "shop": {
            if (!existsSync(dirUser)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùê°ùê®ùê© üå∏] ùóïùóÆÃ£ùóª ùó∞ùóµùòÇÃõùóÆ ùòÅùóµùòÇùó≤ÃÇ ùó∏ùóµùòÇ ùòÉùòÇÃõÃ£ùó∞ ùó∞ùóÆÃÇùòÇ ùó∞ùóÆÃÅ ùóªùó≤ÃÇùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóµùó≤ÃÇÃâ ùòÄùòÇÃõÃâ ùó±ùòÇÃ£ùóªùó¥ ùó∞ùóµùòÇÃõÃÅùó∞ ùóªùóÆÃÜùóªùó¥ ùòÄùóµùóºùóΩ !", threadID, messageID);
            return api.sendMessage("„Äåüå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† ùêíùê°ùê®ùê© üå∏„Äç\nùóõùóÆÃÉùòÜ ùóøùó≤ùóΩùóπùòÜ (ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂) ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùòÄùóºÃÇÃÅ ùóØùóÆÃ£ùóª ùó∞ùóµùóºÃ£ùóª\n\n‚ùØ ùü≠/ ùóïùòÇùòÜ - ùó†ùòÇùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ üé£\n‚ùØ ùüÆ/ ùó¶ùó≤ùóπùóπ - ùóïùóÆÃÅùóª ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫ ùòÅùòÇÃõÃÄùóªùó¥ ùó∞ùóÆÃÇùòÇ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥  ü¶Ä\n‚ùØ ùüØ/ ùó®ùóΩùó¥ùóøùóÆùó±ùó≤ - ùó°ùóÆÃÇùóªùó¥ ùó∞ùóÆÃÇÃÅùóΩ ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫ ùòÅùóøùóºÃõÃâ ùóªùó≤ÃÇùóª ùòÄùó∂ùó≤ÃÇùòÇ ùòÉùó∂ùóΩ ùóΩùóºÃõÃÄ ùóøùóºÃÇÃÄ üõ†\n‚ùØ ùü∞/ ùóòùóªùó∞ùóµùóÆùóªùòÅ - ùó£ùóµùòÇÃÄ ùóΩùóµùó≤ÃÅùóΩ ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫, ùòÄùóºÃõùóª ùòÉùóÆÃ£ÃÇùòÅ ùóΩùóµùóÆÃÇÃâùó∫ ùòÅùóÆÃÜùóªùó¥ ùó±ùóÆùó∫ùó≤ üîÆ", threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "menushop",
                    dirUser
                })
            }, messageID);
        }
        
        default: {
            try {
                if (!existsSync(dirUser)) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóïùóÆÃ£ùóª ùó∞ùóµùòÇÃõùóÆ ùòÅùóµùòÇùó≤ÃÇ ùó∞ùóÆÃÇùòÇ ùó∞ùóÆÃÅ ùòÅùóÆÃ£ùó∂ ùó∏ùóµùòÇ ùòÉùòÇÃõÃ£ùó∞ ùóªùóÆÃÄùòÜ !", threadID, messageID);
                var dataUser = JSON.parse(readFileSync(dirUser, "utf-8"));
                const dateNow = moment().tz("Asia/Ho_Chi_minh");
                const format = new Intl.NumberFormat();
                if (dataUser.fishingrod.rodType == 0) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóõùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùóØùóÆÃ£ùóª ùó∞ùóµùòÇÃõùóÆ ùó∞ùóºÃÅ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ, ùóµùóÆÃÉùòÜ ùó∫ùòÇùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∫ùóºÃõÃÅùó∂ ùòÉùóÆÃÄ ùòÅùóµùòÇÃõÃâ ùóπùóÆÃ£ùó∂ !", threadID, messageID);
                if (dataUser.fishingrod.durability <= 0) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóñùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ùóØùó∂Ã£ ùó¥ùóÆÃÉùòÜ ùòÅùòÇÃõÃÄ ùòÅùóøùòÇÃõùóºÃõÃÅùó∞, ùóµùóÆÃÉùòÜ ùòÄùòÇÃõÃâùóÆ ùó∞ùóµùòÇÃõÃÉùóÆ ùóπùóÆÃ£ùó∂ ùóµùóºùóÆÃ£ÃÜùó∞ ùó∫ùòÇùóÆ ùó∞ùóÆÃÇÃÄùóª ùó∞ùóÆÃÇùòÇ ùó∏ùóµùóÆÃÅùó∞ ùó∫ùóºÃõÃÅùó∂ ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùòÅùó∂ùó≤ÃÇÃÅùóΩ ùòÅùòÇÃ£ùó∞ ùó∞ùóÆÃÇùòÇ ùó∞ùóÆÃÅ", threadID, messageID);
                if (Math.floor((dataUser.fishingrod.cooldownTime) - (dateNow.unix() - dataUser.lastTimeFishing)) > 0) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóñùóÆÃÅ ùòÉùó∂ÃÄ ùóµùóºùóÆÃâùóªùó¥ ùòÄùóºÃõÃ£ ùóªùó≤ÃÇùóª ùòÉùòÇÃõÃÄùóÆ ùóØùóºÃâ ùòÅùóøùóºÃÇÃÅùóª ùóµùó≤ÃÇÃÅùòÅ ùóøùóºÃÇÃÄùó∂, ùóµùóÆÃÉùòÜ ùó∞ùóµùóºÃõÃÄ ùó∫ùóºÃ£ÃÇùòÅ ùòÅùó∂ÃÅ ùóµùóÆÃÜÃÉùóª ùó∞ùóÆÃÇùòÇ ùòÅùó∂ùó≤ÃÇÃÅùóΩ ùóªùóµùó≤ÃÅ üêô", threadID, messageID);
                
                const fishRarity = this .getRarity();
                const currentHour = dateNow.hours();
                const fishData = await this.getFish(fishRarity, currentHour);
                if (!fishData) return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùóõùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùó∞ùóÆÃÅ ùó∞ùóµùó≤ÃÇÃÅùòÅ ùóµùó≤ÃÇÃÅùòÅ ùóøùóºÃÇÃÄùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùóµùó≤ÃÇÃâ ùó∞ùóÆÃÇùòÇ ùòÅùó∂ùó≤ÃÇÃÅùóΩ", threadID, messageID);

                var caught = fishData[Math.floor(Math.random() * ((fishData.length - 1) - 0 + 1)) + 0];
                caught.size = (typeof caught.size != "array") ? caught.size : (Math.random() * (caught.size[1] - caught.size[0]) + caught.size[0]).toFixed(1);
                dataUser.fishingrod.durability = dataUser.fishingrod.durability - Math.floor(Math.random() * (dataUser.fishingrod.rateBroken[1] - dataUser.fishingrod.rateBroken[0] + 1) + dataUser.fishingrod.rateBroken[0]);
                dataUser.lastTimeFishing = dateNow.unix();
                dataUser.totalCatch += 1;
                dataUser.point += caught.price;
                const [error, inventory] = this.addToInventory(dataUser, caught);
                if (error) return api.sendMessage(error, threadID, messageID);
                dataUser.inventory = inventory;
                writeFileSync(dirUser, JSON.stringify(dataUser, null, 4), "utf-8");
                console.log(caught);
                console.log(caught.name);
                if (!caught.name) return api.sendMessage(caught.catch);
                let fishImage = await this.getImage(caught.name + ".png");

                return api.sendMessage({
                    body: `„Äåüå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏„Äç\n\nùóïùóÆÃ£ùóª ùòÉùòÇÃõÃÄùóÆ ùó∞ùóÆÃÇùòÇ ùóπùó≤ÃÇùóª ùó∫ùóºÃ£ÃÇùòÅ ùó∞ùóºùóª : ${caught.name} ü¶Ä\nüå∏ ùóûùó∂ÃÅùó∞ùóµ ùòÅùóµùòÇÃõùóºÃõÃÅùó∞: ${caught.size} ùó∞ùó∫\nüå∏ ùóßùó∂Ãâ ùóπùó≤Ã£ÃÇ ùóµùó∂ùó≤ÃÇÃÅùó∫: ${caught.rarity}\nüå∏ ùó¶ùóºÃÇÃÅ ùòÅùó∂ùó≤ÃÇÃÄùóª ùòÅùóµùòÇ ùòÉùó≤ÃÇÃÄ: ${format.format(caught.price)}$`,
                    attachment: fishImage
                }, threadID, messageID);
            } catch (error) { console.log(error); return api.sendMessage("[üå∏ ùêÖùê¢ùê¨ùê°ùê¢ùêßùê† üå∏] ùó©ùòÇÃõÃÄùóÆ ùó∞ùóºÃÅ ùòÖùóÆÃâùòÜ ùóøùóÆ ùóπùóºÃÇÃÉùó∂ ùó∏ùóµùóºÃÇùóªùó¥ ùó∫ùóºùóªùó¥ ùó∫ùòÇùóºÃÇÃÅùóª ‚ö†Ô∏è\n'ùóßùóÆùóº ùóæùòÇùó≤ÃÇùóª ùó±ùóºÃ£ùóª ùóµùóºÃÇÃÄ ùóªùó≤ÃÇùóª ùó∞ùóÆÃÅ ùó∞ùóµùó≤ÃÇÃÅùòÅ ùóµùó≤ÃÇÃÅùòÅ ùóøùóºÃÇÃÄùó∂ ùóØùóÆÃÇùòÜ ùóºÃõùó∂' - ùóîùóóùó†ùóúùó°", threadID, messageID) }
        }
    }
        }